<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yatop.lambda.base.mapper.WfExecutionTaskMapper" >
  <resultMap id="BaseResultMap" type="com.yatop.lambda.base.model.WfExecutionTask" >
    <!--
      WARNING - @mbggenerated
    -->
    <id column="TASK_ID" property="taskId" jdbcType="BIGINT" />
    <result column="TASK_NAME" property="taskName" jdbcType="VARCHAR" />
    <result column="OWNER_JOB_ID" property="ownerJobId" jdbcType="BIGINT" />
    <result column="SEQUENCE" property="sequence" jdbcType="INTEGER" />
    <result column="REL_NODE_ID" property="relNodeId" jdbcType="BIGINT" />
    <result column="ENGINE_TYPE" property="engineType" jdbcType="VARCHAR" />
    <result column="EXTERNAL_ID" property="externalId" jdbcType="VARCHAR" />
    <result column="SUBMIT_FILE" property="submitFile" jdbcType="VARCHAR" />
    <result column="RETURN_FILE" property="returnFile" jdbcType="VARCHAR" />
    <result column="LOG_FILE" property="logFile" jdbcType="VARCHAR" />
    <result column="COST_TIME" property="costTime" jdbcType="BIGINT" />
    <result column="TASK_PROGRESS" property="taskProgress" jdbcType="INTEGER" />
    <result column="TASK_STATE" property="taskState" jdbcType="INTEGER" />
    <result column="DESCRIPTION" property="description" jdbcType="VARCHAR" />
    <result column="STATUS" property="status" jdbcType="INTEGER" />
    <result column="LAST_UPDATE_TIME" property="lastUpdateTime" jdbcType="TIMESTAMP" />
    <result column="LAST_UPDATE_OPER" property="lastUpdateOper" jdbcType="VARCHAR" />
    <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
    <result column="CREATE_OPER" property="createOper" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.yatop.lambda.base.model.WfExecutionTask" extends="BaseResultMap" >
    <!--
      WARNING - @mbggenerated
    -->
    <result column="TASK_CONTEXT" property="taskContext" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
    -->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
    -->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
    -->
    TASK_ID, TASK_NAME, OWNER_JOB_ID, SEQUENCE, REL_NODE_ID, ENGINE_TYPE, EXTERNAL_ID, 
    SUBMIT_FILE, RETURN_FILE, LOG_FILE, COST_TIME, TASK_PROGRESS, TASK_STATE, DESCRIPTION, 
    STATUS, LAST_UPDATE_TIME, LAST_UPDATE_OPER, CREATE_TIME, CREATE_OPER
  </sql>
  <sql id="Blob_Column_List" >
    <!--
      WARNING - @mbggenerated
    -->
    TASK_CONTEXT
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.yatop.lambda.base.model.WfExecutionTaskExample" >
    <!--
      WARNING - @mbggenerated
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from wf_execution_task
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.yatop.lambda.base.model.WfExecutionTaskExample" >
    <!--
      WARNING - @mbggenerated
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from wf_execution_task
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <include refid="MysqlSuffix" />
  </select>
  <delete id="deleteByExample" parameterType="com.yatop.lambda.base.model.WfExecutionTaskExample" >
    <!--
      WARNING - @mbggenerated
    -->
    delete from wf_execution_task
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <select id="countByExample" parameterType="com.yatop.lambda.base.model.WfExecutionTaskExample" resultType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
    -->
    select count(*) from wf_execution_task
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    <!--
      WARNING - @mbggenerated
    -->
    update wf_execution_task
    <set >
      <if test="record.taskId != null" >
        TASK_ID = #{record.taskId,jdbcType=BIGINT},
      </if>
      <if test="record.taskName != null" >
        TASK_NAME = #{record.taskName,jdbcType=VARCHAR},
      </if>
      <if test="record.ownerJobId != null" >
        OWNER_JOB_ID = #{record.ownerJobId,jdbcType=BIGINT},
      </if>
      <if test="record.sequence != null" >
        SEQUENCE = #{record.sequence,jdbcType=INTEGER},
      </if>
      <if test="record.relNodeId != null" >
        REL_NODE_ID = #{record.relNodeId,jdbcType=BIGINT},
      </if>
      <if test="record.engineType != null" >
        ENGINE_TYPE = #{record.engineType,jdbcType=VARCHAR},
      </if>
      <if test="record.externalId != null" >
        EXTERNAL_ID = #{record.externalId,jdbcType=VARCHAR},
      </if>
      <if test="record.submitFile != null" >
        SUBMIT_FILE = #{record.submitFile,jdbcType=VARCHAR},
      </if>
      <if test="record.returnFile != null" >
        RETURN_FILE = #{record.returnFile,jdbcType=VARCHAR},
      </if>
      <if test="record.logFile != null" >
        LOG_FILE = #{record.logFile,jdbcType=VARCHAR},
      </if>
      <if test="record.costTime != null" >
        COST_TIME = #{record.costTime,jdbcType=BIGINT},
      </if>
      <if test="record.taskProgress != null" >
        TASK_PROGRESS = #{record.taskProgress,jdbcType=INTEGER},
      </if>
      <if test="record.taskState != null" >
        TASK_STATE = #{record.taskState,jdbcType=INTEGER},
      </if>
      <if test="record.description != null" >
        DESCRIPTION = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null" >
        STATUS = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.lastUpdateTime != null" >
        LAST_UPDATE_TIME = #{record.lastUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastUpdateOper != null" >
        LAST_UPDATE_OPER = #{record.lastUpdateOper,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createOper != null" >
        CREATE_OPER = #{record.createOper,jdbcType=VARCHAR},
      </if>
      <if test="record.taskContext != null" >
        TASK_CONTEXT = #{record.taskContext,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    <!--
      WARNING - @mbggenerated
    -->
    update wf_execution_task
    set TASK_ID = #{record.taskId,jdbcType=BIGINT},
      TASK_NAME = #{record.taskName,jdbcType=VARCHAR},
      OWNER_JOB_ID = #{record.ownerJobId,jdbcType=BIGINT},
      SEQUENCE = #{record.sequence,jdbcType=INTEGER},
      REL_NODE_ID = #{record.relNodeId,jdbcType=BIGINT},
      ENGINE_TYPE = #{record.engineType,jdbcType=VARCHAR},
      EXTERNAL_ID = #{record.externalId,jdbcType=VARCHAR},
      SUBMIT_FILE = #{record.submitFile,jdbcType=VARCHAR},
      RETURN_FILE = #{record.returnFile,jdbcType=VARCHAR},
      LOG_FILE = #{record.logFile,jdbcType=VARCHAR},
      COST_TIME = #{record.costTime,jdbcType=BIGINT},
      TASK_PROGRESS = #{record.taskProgress,jdbcType=INTEGER},
      TASK_STATE = #{record.taskState,jdbcType=INTEGER},
      DESCRIPTION = #{record.description,jdbcType=VARCHAR},
      STATUS = #{record.status,jdbcType=INTEGER},
      LAST_UPDATE_TIME = #{record.lastUpdateTime,jdbcType=TIMESTAMP},
      LAST_UPDATE_OPER = #{record.lastUpdateOper,jdbcType=VARCHAR},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      CREATE_OPER = #{record.createOper,jdbcType=VARCHAR},
      TASK_CONTEXT = #{record.taskContext,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    <!--
      WARNING - @mbggenerated
    -->
    update wf_execution_task
    set TASK_ID = #{record.taskId,jdbcType=BIGINT},
      TASK_NAME = #{record.taskName,jdbcType=VARCHAR},
      OWNER_JOB_ID = #{record.ownerJobId,jdbcType=BIGINT},
      SEQUENCE = #{record.sequence,jdbcType=INTEGER},
      REL_NODE_ID = #{record.relNodeId,jdbcType=BIGINT},
      ENGINE_TYPE = #{record.engineType,jdbcType=VARCHAR},
      EXTERNAL_ID = #{record.externalId,jdbcType=VARCHAR},
      SUBMIT_FILE = #{record.submitFile,jdbcType=VARCHAR},
      RETURN_FILE = #{record.returnFile,jdbcType=VARCHAR},
      LOG_FILE = #{record.logFile,jdbcType=VARCHAR},
      COST_TIME = #{record.costTime,jdbcType=BIGINT},
      TASK_PROGRESS = #{record.taskProgress,jdbcType=INTEGER},
      TASK_STATE = #{record.taskState,jdbcType=INTEGER},
      DESCRIPTION = #{record.description,jdbcType=VARCHAR},
      STATUS = #{record.status,jdbcType=INTEGER},
      LAST_UPDATE_TIME = #{record.lastUpdateTime,jdbcType=TIMESTAMP},
      LAST_UPDATE_OPER = #{record.lastUpdateOper,jdbcType=VARCHAR},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      CREATE_OPER = #{record.createOper,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <sql id="MysqlSuffix" >
    <if test="page != null" >
      <![CDATA[ limit #{page.begin} , #{page.length} ]]>
    </if>
  </sql>
</mapper>